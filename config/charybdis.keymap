#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        scale-multiplier = <1>;
        scale-divisor = <4>;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        }; 
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp EQUAL   &kp N1   &kp N2          &kp N3       &kp N4            &kp N5              &kp N6        &kp N7             &kp N8       &kp N9           &kp N0           &kp MINUS
&kp TAB     &kp Q    &kp W           &kp E        &kp R             &kp T               &kp Y         &kp U              &kp I        &kp O            &kp P            &kp BACKSLASH
&kp ESCAPE  &lt 4 A  &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &ht LWIN G          &ht RWIN H    &ht RIGHT_SHIFT J  &ht RCTRL K  &ht RIGHT_ALT L  &lt 1 SEMICOLON  &tog 6
&kp GRAVE   &kp Z    &kp X           &kp C        &lt 5 V           &kp B               &kp N         &lt 3 M            &kp COMMA    &kp DOT          &kp SLASH        &tog 7
                                     &kp DELETE   &kp BACKSPACE     &mkp LCLK            &kp ENTER     &lt 2 SPACE
                                                  &kp LEFT_SHIFT    &kp LEFT_CONTROL    &kp LEFT_ALT
            >;
        };

        MOD {
            bindings = <
&none  &none    &none           &none         &none          &none    &none          &none       &none              &none          &none  &none
&none  &none    &kp HOME        &kp UP_ARROW  &kp END        &none    &none          &none       &none              &none          &none  &none
&none  &kp TAB  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT      &none    &kp RIGHT_GUI  &kp RSHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &none  &none
&none  &none    &kp PAGE_UP     &kp ESCAPE    &kp PAGE_DOWN  &none    &none          &none       &none              &none          &none  &none
                                &none         &none          &none    &kp MINUS      &kp UNDER
                                              &none          &none    &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        NUM {
            bindings = <
&none    &none   &none   &none      &none      &none        &none      &none     &none      &none   &none    &none
&kp F12  &kp F1  &kp F2  &kp F3     &kp F4     &kp F5       &kp F6     &kp F7    &kp F8     &kp F9  &kp F10  &kp F11
&none    &kp N1  &kp N2  &kp N3     &kp N4     &kp N5       &kp N6     &kp N7    &kp N8     &kp N9  &kp N0   &none
&none    &none   &none   &kp MINUS  &kp PLUS   &kp EQUAL    &kp EQUAL  &kp PLUS  &kp MINUS  &none   &none    &none
                         &kp LALT   &kp LSHFT  &kp LCTRL    &none      &none
                                    &none      &none        &none
            >;
        };

        FUN {
            bindings = <
&none  &none    &none    &none   &none                  &none                &none            &none                 &none         &none         &none  &bt BT_CLR
&none  &kp F1   &kp F2   &kp F3  &kp F4                 &kp F5               &none            &none                 &bt BT_SEL 0  &bt BT_SEL 3  &none  &none
&none  &kp F6   &kp F7   &kp F8  &kp F9                 &kp F10              &none            &none                 &bt BT_SEL 1  &bt BT_SEL 4  &none  &none
&none  &kp F11  &kp F12  &none   &none                  &bootloader          &none            &none                 &bt BT_SEL 2  &none         &none  &bootloader
                         &none   &kp LC(C_AC_ZOOM_OUT)  &kp C_VOLUME_DOWN    &kp C_VOLUME_UP  &kp RC(C_AC_ZOOM_IN)
                                 &none                  &none                &none
            >;
        };

        SYM {
            bindings = <
&none  &none  &none             &none                 &none                 &none        &none          &none                  &none                  &none              &none        &none
&none  &none  &kp CAPS          &kp PLUS              &kp SQT               &kp CARET    &kp ASTRK      &kp DOUBLE_QUOTES      &kp AT                 &kp RMETA          &kp PERCENT  &none
&none  &none  &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)  &kp LEFT_PARENTHESIS  &kp PIPE     &kp SLASH      &kp RIGHT_PARENTHESIS  &kp LS(RIGHT_BRACKET)  &kp RIGHT_BRACKET  &kp COLON    &none
&none  &none  &kp AMPERSAND     &kp GRAVE             &kp EXCLAMATION       &kp PLUS     &kp BACKSLASH  &kp QUESTION           &kp TILDE              &kp DOLLAR         &kp HASH     &none
                                &none                 &none                 &none        &none          &none
                                                      &none                 &none        &none
            >;
        };


MOUSE {
            bindings = <
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &mo 9      &none      &none        &none  &none  &none  &none  &none  &none
                     &mkp RCLK  &mo 8      &mkp LCLK    &none  &none
                                &none      &none        &none
            >;

        };

        GAM {
            bindings = <
&kp EQUAL  &kp N1  &kp N2  &kp N3      &kp N4          &kp N5       &kp N6        &kp N7     &kp N8     &kp N9   &kp N0     &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E       &kp R           &kp T        &kp Y         &kp U      &kp I      &kp O    &kp P      &kp BSLH
&kp ESC    &kp A   &kp S   &kp D       &kp F           &kp G        &kp H         &kp J      &kp K      &kp L    &kp SEMI   &tog 6
&kp GRAVE  &kp Z   &kp X   &kp C       &kp V           &kp B        &kp N         &kp M      &kp COMMA  &kp DOT  &kp SLASH  &tog 7
                           &kp DELETE  &kp BSPC        &mkp LCLK     &kp ENTER     &kp SPACE
                                       &kp LEFT_SHIFT  &kp LCTRL    &kp LEFT_ALT
            >;
        };

        GAMS {
            bindings = <
&kp MINUS  &kp EQUAL  &kp N1  &kp N2     &kp N3     &kp N4            &kp N5         &kp N6         &kp N7  &kp N8     &kp N9     &kp N0
&kp BSLH   &kp TAB    &kp Q   &kp W      &kp E      &kp R             &kp T          &kp Y          &kp U   &kp I      &kp O      &kp P
&kp APOS   &kp ESC    &kp A   &kp S      &kp D      &kp F             &kp G          &kp H          &kp J   &kp K      &kp L      &tog 6
&kp F5     &kp GRAVE  &kp Z   &kp X      &kp C      &kp V             &kp B          &kp N          &kp M   &kp COMMA  &kp SLASH  &tog 7
                              &kp LCTRL  &kp SPACE  &kp LEFT_SHIFT    &kp DELETE     &kp BACKSPACE
                                         &trans     &trans            &kp RIGHT_ALT
            >;
        };

        DRAG {
            bindings = <
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &mo 9      &none      &none        &none  &none  &none  &none  &none  &none
                     &mkp RCLK  &trans      &mkp LCLK    &none  &none
                                &none  &none        &none
            >;

        };

        // New sniping layer (layer 9)

        SNIP {
            bindings = <
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none      &none      &none        &none  &none  &none  &none  &none  &none
&none  &none  &none  &trans      &none      &none        &none  &none  &none  &none  &none  &none
                     &mkp RCLK  &mo 8      &mkp LCLK    &none  &none
                                &none  &none        &none
            >;

        };

    };
};

